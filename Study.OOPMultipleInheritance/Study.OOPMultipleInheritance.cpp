#include <iostream>
using namespace std;

class Car //Класс Car
{
public: 
    Car()
    {
        cout << "Вызвался коструктор класса Car" << endl; //Конструктор
    }
    void Use() //Одиннаковые методы классов Car , Airplane
    {
        cout << "Бибика едет" << endl;
    }
    ~Car()
    {
        cout << "Вызвался деструктор класса Car" << endl; //Деструктор
    }
private:

    string Mark;
};

class Airplane
{
public:
    Airplane()
    {
        cout << "Вызвался коструктор класса Airplane" << endl; //Конструктор
    }
    
    void Use() //Одиннаковые методы классов Car , Airplane
    {
        cout << "Самолетик летит" << endl;
    }

    ~Airplane()
    {
        cout << "Вызвался деструктор класса Airplane" << endl; //Деструктор
    }
private:

    string AirCompany;
};

class Aircar : public Car, public Airplane //Множественное наследование , порядок играет важную роль
{
public:
    Aircar()
    {
        cout << "Вызвался коструктор класса Aircar" << endl; //Конструктор
    }
    
    ~Aircar()
    {
        cout << "Вызвался деструктор класса Aircar" << endl; //Деструктор
    }
};

//Конструкторы вызываются в том же порядке , что и при обычном наследовании, сначала вызываются главные конструкторы, от которых наследуются другие классы , а потом наследованные кострукторы
//Деструкторы вызываются в том же порядке , что и при обычном наследовании, сначала самый последний унаследованный класс , после более поздний класс, от которого наследовались

int main()
{
    setlocale(LC_ALL, "ru");

    Aircar airCar;

    ((Car)airCar).Use(); //Приведение типа, использование метода для нужного класса
    ((Airplane)airCar).Use(); //Приведение типа, использование метода для нужного класса
}
